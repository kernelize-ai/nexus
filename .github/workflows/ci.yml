name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os == 'ubuntu-latest' && 'cuda-runner' || matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build-type: [Debug, Release]
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: macos-latest
            compiler: clang
          #- os: windows-latest
          #  compiler: msvc
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake python3 python3-dev python3-pip python3-pybind11
        sudo apt-get install -y libc++-dev libc++abi-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake python@3.11 pybind11
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    
    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DNEXUS_BUILD_PYTHON_MODULE=ON -DNEXUS_BUILD_PLUGINS=ON
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DNEXUS_BUILD_PYTHON_MODULE=ON -DNEXUS_BUILD_PLUGINS=ON
    
    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        make -j$(if [ "${{ matrix.os }}" = "macos-latest" ]; then sysctl -n hw.ncpu; else nproc; fi)
    
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake --build . --config ${{ matrix.build-type }} --parallel
    
    - name: Run tests (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build-type }} 

  ci:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Report CI Status
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ CI Pipeline completed successfully"
            echo "All build matrix jobs passed"
          else
            echo "❌ CI Pipeline failed"
            echo "Build status: ${{ needs.build.result }}"
            exit 1
          fi
