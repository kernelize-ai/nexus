name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ubuntu:
    runs-on: cuda-runner
    container:
      image: nvidia/cuda:12.1.0-devel-ubuntu22.04
      options: --gpus all
    strategy:
      matrix:
        build-type: [Release]

    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y build-essential cmake python3 python3-dev python3-pip python3-pybind11 python-is-python3
        apt-get install -y libc++-dev libc++abi-dev git

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Verify CUDA installation
      run: |
        nvcc --version
        nvidia-smi
        which nvcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Build and test Nexus
      run: |
        ./test/packaging/test_build.sh


  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        build-type: [Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        brew update
        brew install cmake python@3.11 pybind11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Build and test Nexus
      run: |
        ./test/packaging/test_build.sh

  # build-windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       build-type: [Debug, Release]
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: recursive
  #   
  #   - name: Install Python dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install -r requirements.txt
  #   
  #   - name: Configure CMake
  #     run: |
  #       mkdir build
  #       cd build
  #       cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DNEXUS_BUILD_PYTHON_MODULE=ON -DNEXUS_BUILD_PLUGINS=ON
  #   
  #   - name: Build
  #     run: |
  #       cd build
  #       cmake --build . --config ${{ matrix.build-type }} --parallel
  #   
  #   - name: Run tests
  #     run: |
  #       cd build
  #       ctest --output-on-failure -C ${{ matrix.build-type }}

  ci:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos]
    if: always()
    steps:
      - name: Report CI Status
        run: |
          if [[ "${{ needs.build-ubuntu.result }}" == "success" && "${{ needs.build-macos.result }}" == "success" ]]; then
            echo "✅ CI Pipeline completed successfully"
            echo "All build matrix jobs passed"
          else
            echo "❌ CI Pipeline failed"
            echo "Ubuntu build status: ${{ needs.build-ubuntu.result }}"
            echo "macOS build status: ${{ needs.build-macos.result }}"
            # echo "Windows build status: ${{ needs.build-windows.result }}"
            exit 1
          fi